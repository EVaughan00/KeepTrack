<!-- <v-flex xs4>
  <div class="white elevation-0">
    <v-toolbar dense class="purple darken-1" dark>
      <v-toolbar-title>Cake Inventory</v-toolbar-title>
      <v-spacer></v-spacer>
      <v-toolbar-items>
          <v-btn dark color="light-green" @click="newCakeInv()">
            Update
          </v-btn>
      </v-toolbar-items>
    </v-toolbar>
    <table class="table1">
      <tr>
        <th class="th2" style="width: 50%">Cakes</th>
        <th class="th2">SM</th>
        <th class="th2">LG</th>
      </tr>
      <tr>
        <td class="td2">C&C</td>
        <td class="td2">
          <input type="text" name="SC&C" value="" v-model="SCC">
        </td>
        <td class="td2">
          <input type="text" name="LC&C" value="" v-model="LCC">
        </td>
      </tr>
      <tr>
        <td class="td2">Mint</td>
        <td class="td2">
          <input type="text" name="SMint" value="" v-model="SMint">
        </td>
        <td class="td2">
          <input type="text" name="LMint" value="" v-model="LMint">
        </td>
      </tr>
      <tr>
        <td class="td2">CBC</td>
        <td class="td2">
          <input type="text" name="SCBC" value="" v-model="SCBC">
        </td>
        <td class="td2">
          <input type="text" name="LCBC" value="" v-model="LCBC">
        </td>
      </tr>
      <tr>
        <td class="td2">CHIP</td>
        <td class="td2">
          <input type="text" name="SCHIP" value="" v-model="SCHIP">
        </td>
        <td class="td2">
          <input type="text" name="LCHIP" value="" v-model="LCHIP">
        </td>
      </tr>
      <tr>
        <td class="td2">CD</td>
        <td class="td2">
          <input type="text" name="SCD" value="" v-model="SCD">
        </td>
        <td class="td2">
          <input type="text" name="LCD" value="" v-model="LCD">
        </td>
      </tr>
      <tr>
        <td class="td2">COF</td>
        <td class="td2">
          <input type="text" name="SCOF" value="" v-model="SCOF">
        </td>
        <td class="td2">
          <input type="text" name="LCOF" value="" v-model="LCOF">
        </td>
      </tr>
      <tr>
        <td class="td2">SP</td>
        <td class="td2">
          <input type="text" name="SSP" value="" v-model="SSP">
        </td>
        <td class="td2">
          <input type="text" name="LSP" value="" v-model="LSP">
        </td>
      </tr>
      <tr>
        <td class="td2">CND</td>
        <td class="td2">
          <input type="text" name="SCND" value="" v-model="SCND">
        </td>
        <td class="td2">
          <input type="text" name="LCND" value="" v-model="LCND">
        </td>
      </tr>
      <tr>
        <td class="td2">PBP</td>
        <td class="td2">
          <input type="text" name="SPBP" value="" v-model="SPBP">
        </td>
        <td class="td2">
          <input type="text" name="LPBP" value="" v-model="LPBP">
        </td>
      </tr>
      <tr>
        <td class="td2">MD</td>
        <td class="td2">
          <input type="text" name="SMD" value="" v-model="SMD">
        </td>
        <td class="td2">
          <input type="text" name="LMD" value="" v-model="LMD">
        </td>
      </tr>
      <tr>
        <td class="td2">TDD</td>
        <td>
          <input type="text" name="STDD" value="" v-model="STDD">
        </td>
        <td class="td2">
          <input type="text" name="LTDD" value="" v-model="LTDD">
        </td>
      </tr>
    </table>
  </div>
</v-flex> -->



        <!-- <div class="white elevation-0">
          <v-toolbar dense class="cyan" dark>
            <v-toolbar-title>Cakes to build</v-toolbar-title>
          </v-toolbar>
            <label v-if="LCC<2 && LCC!=''">Large C&C x{{2-this.LCC}}</label>
              <br>
            <label v-if="SCC<2 && SCC!=''">Large C&C x{{2-this.SCC}}</label>
        <table width="100%" class="tbl1">
          <tr class="tr1">
            <td class="td1">__Clean bathroom</td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Dishes</td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Stock fruits</td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Bleach rags</td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Build Cake: <label v-if="LCC<2">Large C&C x{{2-this.LCC}}</label></td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Build Cake:</td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Build Cake:</td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Build Cake: </td>
          </tr>
          <tr class="tr1">
            <td class="td1">__Build Cake: </td>
          </tr>
        </table>
      </div> -->



          <!-- <v-flex xs4>
            <div class="white elevation-0">
              <v-toolbar dense class="cyan" dark>
                <v-toolbar-title>Ice Inventory</v-toolbar-title>
              </v-toolbar>
              <v-flex offset-xs0>
                <h3>Ice Cream Management coming soon!</h3>
              </v-flex>
            </div>
          </v-flex> -->


          var i
          var j
          var k
          var index
          var monthSort = data
          var date = []
          for (i = 0; i < data.length; i++) {
            date[i] = data[i].dueDate.substring(3, 5)
            // console.log(month[i])
          }
          date.sort((a, b) => a - b)
          for (j = 0; j < date.length; j++) {
            for (k = 0; k < data.length; k++) {
              if (date[j] === data[k].dueDate.substring(3, 5)) {
                if (date[j] === date[j + 1]) {
                  index = k + 2
                  continue
                } else {
                  index = k
                  continue
                }
              }
              console.log(index)
              monthSort[j] = monthSort[index]
              console.log(monthSort[j].dueDate)
            }
          }

          app.get('/dashboard/:token', (req, res) => {
            var token = req.params.token
            jwt.verify(token, config.authentication.jwtSecret, function (err, decoded) {
              if (err) {
                console.log(err)
                res.status(500).send({
                  error: 'JWT Signature incorrect'
                })
              } else {
                console.log('Decoded store is ' + decoded.store)
                try{
                  const task = Tasks.find({ completed: false }, function (err, task) {
                    console.log('Token is ' + token);
                    res.send({task: task})
                  })
                  const message = Messages.find({store: decode.store}, function (err, message) {
                    console.log('These are the messages: ' + message);
                    res.send({message: message})
                  })
                  console.log('found');
                } catch (err) {
                  res.status(500).send({
                    error: 'error occured'
                  })
                }
              }
            })
          })


          var Months = []
          // var indexArray = []
          // var timesOfDupe = 0
          // var dupeIndex
          // var multiple
          var valIndex
          for (var i = 0; i < this.cakes.length; i++) {
            Months[i] = this.cakes[i].dueDate.substring(3, 5)
            console.log('Original Months: ' + Months[i])
          }
          Months.sort(function (a, b) { return a - b })
          for (var j = 0; j < Months.length; j++) {
            console.log('Sorted Months: ' + Months[j])
          }
          // for (var k = 0; k < Months.length; k++) {
          //   if (Months[k] === Months[k + 1]) {
          //     console.log('Duplicate indexes at: ' + k + ' and ' + (k + 1))
          //     dupeIndex = k
          //     for (var l = k; l < Months.length - k; l++) {
          //       if (Months[l] === Months[l + 1]) {
          //         timesOfDupe++
          //       } else {
          //         break
          //       }
          //     }
          //   }
          //   Months.splice(dupeIndex, timesOfDupe)
          //   timesOfDupe = 0
          // }
          for (var m = 0; m < this.cakes.length; m++) {
            console.log(Months[m])
            for (var n = 0; n < Months.length; n++) {
              if (Months[m] === this.cakes[n].dueDate.substring(3, 5)) {
                valIndex = n
                console.log(valIndex + this.cakes[n].dueDate.substring(3, 5) + m)
                break
              }
            }
            // this.cakes[m] = this.cakes[valIndex]
          }
          for (var o = 0; o < this.cakes.length; o++) {
            console.log('Sorted: ' + this.cakes[o].dueDate)
          }
          // for (var o = 0; o < Months.length; o++) {
          //   if (Months[k] === this.cakes[i].dueDate.substring(0, 2)) {
          //     for (var p = 0; p < this.cakes.length; p++) {
          //       if (Months[k] === this.cakes[p].dueDate.substring(0, 2)) {
          //         multiple++
          //       }
          //     }
          //   }
          // }
          // this.cakes.dueDate.substring(0, 2).sort(function (a, b) { return a - b })


          async newCakeInv () {
            await cakeService.newCakeInv({
              LCC: this.LCC,
              SCC: this.SCC,
              SMint: this.SMint,
              LMint: this.LMint,
              SCBC: this.SCBC,
              LCBC: this.LCBC,
              SCHIP: this.SCHIP,
              LCHIP: this.LCHIP,
              SCD: this.SCD,
              LCD: this.LCD,
              SCOF: this.SCOF,
              LCOF: this.LCOF,
              SSP: this.SSP,
              LSP: this.LSP,
              SCND: this.SCND,
              LCND: this.LCND,
              SPBP: this.SPBP,
              LPBP: this.LPBP,
              SMD: this.SMD,
              LMD: this.LMD,
              STDD: this.STDD,
              LTDD: this.LTDD
            })
            this.getCakeInv()
          },
